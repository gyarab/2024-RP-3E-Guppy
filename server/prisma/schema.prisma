generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String             @db.Text
  joinCode    String             @unique
  logoUrl     String?
  mainColor   String?
  users       UserOrganization[]
  posts       Post[]
  createdAt   DateTime           @default(now())
}

model User {
  id                       Int                @id @default(autoincrement())
  email                    String             @unique
  password                 String
  name                     String?
  birthdate                DateTime?
  profilePictureUrl        String?
  bio                      String?
  phoneNumber              String?
  isVerified               Boolean            @default(false)
  lastLogin                DateTime?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  posts                    Post[]
  comments                 Comment[]
  userOrganizations        UserOrganization[]
  likedEntities            Like[]
  tokenVersion             Int                @default(0)
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  pollVotes                PollVote[]
}

model Role {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  UserOrganization UserOrganization[]
}

model UserOrganization {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int

  @@unique([userId, organizationId])
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  content        String       @db.Text
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  comments       Comment[]
  tags           Tag[]
  likes          Like[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  poll           Poll?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  likes     Like[]
  createdAt DateTime @default(now())
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  @@unique([userId, postId, commentId])
}

model Poll {
  id      Int          @id @default(autoincrement())
  post    Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int          @unique
  options PollOption[]
}

model PollOption {
  id     Int        @id @default(autoincrement())
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId Int
  name   String
  votes  PollVote[]
}

model PollVote {
  id           Int        @id @default(autoincrement())
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int        @unique
}

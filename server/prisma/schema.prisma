generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  OBSERVER
}


model User {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  organizations Organization[]
  memberOrgs    Organization[]  @relation("MemberOrganizations")
  tokenVersion  Int             @default(0)
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  Organization Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  comments  Comment[]
  likes     Like[]
  tags      Tag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())

  @@unique([userId, postId], name: "unique_user_post_like")
  @@unique([userId, commentId], name: "unique_user_comment_like")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        String  @id @default(cuid())
  name      String
  creator   User    @relation(fields: [creatorId], references: [id])
  creatorId    String
  users     User[]  @relation("MemberOrganizations")
  posts     Post[]
  createdAt DateTime  @default(now())
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  creator   User               @relation(fields: [creatorId], references: [id])
  creatorId Int
  users     UserOrganization[]
  posts     Post[]
  createdAt DateTime           @default(now())
}

model User {
  id                   Int                @id @default(autoincrement())
  email                String             @unique
  password             String
  name                 String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  posts                Post[]
  comments             Comment[]
  likes                Like[]
  organizations        UserOrganization[]
  createdOrganizations Organization[]
  tokenVersion         Int                @default(0)
}

model Role {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  userOrganizations UserOrganization[]
}

// Tahle tabluka slouzi jako junction table, ktera umoznuje vytvorit  
// many-to-many relaci mezi tabulkami User a Organization.
// Krome propojeni uzivatele s organizaci tato tabulka 
// umoznuje pridat dalsi informace, coz v nasem pripade 
// je role usera v dane organizaci.
model UserOrganization {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int

  @@unique([userId, organizationId]) // Zajistuje, ze uzivatel nemuze byt ve stejne organizaci vicekrat
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  content        String
  published      Boolean      @default(false)
  author         User         @relation(fields: [authorId], references: [id])
  authorId       Int
  comments       Comment[]
  likes          Like[]
  tags           Tag[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  likes     Like[]
  createdAt DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int? // Optional: Umoznuje tomuto likeu patrit k postu nebo ne
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int? // Optional: Umoznuje tomuto likeu patrit k komentari nebo ne
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Zajistuje, ze uzivatel muze likeovat post jen jednou
  @@unique([userId, commentId]) // Zajistuje, ze uzivatel muze likeovat komentar jen jednou
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}
